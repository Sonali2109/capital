openapi: 3.0.3
info:
  title: Capital API
  version: 1.0.0
  description: API for users, organisers, events, tickets, and transactions.

servers:
  - url: http://localhost:3001

tags:
  - name: Users
    description: Endpoints for user authentication and profile
  - name: Events
    description: Public event and slots management
  - name: Tickets
    description: Ticket purchase and retrieval
  - name: Transactions
    description: Transaction retrieval and initiation
  - name: Organisers
    description: Organiser authentication and analytics
  - name: Health
    description: Service health and metrics

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
        errors:
          nullable: true
      required:
        - message

    MessageResponse:
      type: object
      properties:
        message:
          type: string
      required:
        - message

    UserSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
      required:
        - id
        - email
        - firstName
        - lastName

    AuthResponse:
      type: object
      properties:
        message:
          type: string
        token:
          type: string
        user:
          allOf:
            - $ref: '#/components/schemas/UserSummary'
      required:
        - message
        - token

    SignupRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        firstName:
          type: string
          minLength: 3
          maxLength: 20
        lastName:
          type: string
          minLength: 3
          maxLength: 20
        password:
          type: string
          minLength: 6
      required:
        - email
        - password

    SigninRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
      required:
        - email
        - password

    VerificationRequest:
      type: object
      properties:
        otp:
          type: string
      required:
        - otp

    ResetPasswordRequest:
      type: object
      description: Reset password using email and new password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
      required:
        - email
        - password

    UserMeResponse:
      type: object
      properties:
        message:
          type: string
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        publicKey:
          type: string
          nullable: true
        privateKey:
          type: string
          nullable: true
        profilePic:
          type: string
          format: uri
          nullable: true
      required:
        - message

    UpdateUserRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        profileImageUrl:
          type: string
          format: uri
      additionalProperties: false

    Card:
      type: object
      properties:
        id:
          type: string
        bank_name:
          type: string
        card_number:
          type: string
        balance:
          type: number
        created_at:
          type: string
          format: date-time
      required:
        - id
        - bank_name
        - card_number
        - balance
        - created_at

    CardsResponse:
      type: object
      properties:
        message:
          type: string
        cards:
          type: array
          items:
            $ref: '#/components/schemas/Card'

    Event:
      type: object
      properties:
        id:
          type: string
        organiserId:
          type: string
        title:
          type: string
        description:
          type: string
        banner_url:
          type: string
          format: uri
          nullable: true
        status:
          type: string
          enum: [draft, published, cancelled]
        location_name:
          type: string
        location_url:
          type: string
          format: uri
      required:
        - id
        - organiserId
        - title
        - description
        - status
        - location_name
        - location_url

    EventCreateRequest:
      type: object
      properties:
        organiserId:
          type: string
        title:
          type: string
          minLength: 3
        description:
          type: string
          minLength: 5
        banner_url:
          type: string
          format: uri
          nullable: true
        status:
          type: string
          enum: [draft, published, cancelled]
        location_name:
          type: string
          minLength: 3
        location_url:
          type: string
          format: uri
      required:
        - organiserId
        - title
        - description
        - status
        - location_name
        - location_url

    EventSlot:
      type: object
      properties:
        id:
          type: string
        eventId:
          type: string
        capacity:
          type: integer
          minimum: 1
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        price:
          type: number
          minimum: 0
      required:
        - id
        - eventId
        - capacity
        - start_time
        - end_time
        - price

    EventSlotCreateRequest:
      type: object
      properties:
        capacity:
          type: integer
          minimum: 1
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        price:
          type: number
          minimum: 0
      required:
        - capacity
        - start_time
        - end_time
        - price

    TicketPurchaseRequest:
      type: object
      properties:
        token:
          type: string
        eventSlotId:
          type: string
        quantity:
          type: integer
          minimum: 1
          maximum: 15
        cardNumber:
          type: string
          pattern: '^\d{4}-\d{4}-\d{4}-\d{4}$'
      required:
        - token
        - eventSlotId
        - quantity
        - cardNumber

    TicketPurchaseResponse:
      type: object
      properties:
        message:
          type: string
        ticketURL:
          type: string
          format: uri

    TicketDetail:
      type: object
      properties:
        eventSlotId:
          type: string
        is_valid:
          type: boolean
        signature:
          type: string
        user:
          type: object
          properties:
            email:
              type: string
              format: email
            first_name:
              type: string
            last_name:
              type: string
        eventSlot:
          type: object
          properties:
            event:
              type: object
              properties:
                title:
                  type: string
                status:
                  type: string
                  enum: [draft, published, cancelled]
                location_name:
                  type: string
                location_url:
                  type: string
                  format: uri

    TransactionInitiateRequest:
      type: object
      properties:
        token:
          type: string
        amount:
          type: string
          pattern: '^\d{2,4}$'
        cardNumber:
          type: string
          pattern: '^\d{4}-\d{4}-\d{4}-\d{4}$'
        bankName:
          type: string
      required:
        - token
        - amount
        - cardNumber

    TransactionSummary:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        amount:
          oneOf:
            - type: number
            - type: string
        token:
          type: string
        created_at:
          type: string
          format: date-time
        bank_name:
          type: string
        cardId:
          type: string
        ticketId:
          type: string
          nullable: true
        ticket_count:
          type: integer
          nullable: true
        description:
          type: string
          nullable: true
        walletId:
          type: string
          nullable: true
        wallet:
          nullable: true
        card:
          type: object
          properties:
            id:
              type: string
            bank_name:
              type: string
            card_number:
              type: string
        ticket:
          type: object
          properties:
            id:
              type: string
            is_valid:
              type: boolean
            issued_at:
              type: string
              format: date-time
              nullable: true
            scanned_at:
              type: string
              format: date-time
              nullable: true
            signature:
              type: string
            eventSlot:
              type: object
              properties:
                id:
                  type: string
                eventId:
                  type: string
                start_time:
                  type: string
                  format: date-time
                end_time:
                  type: string
                  format: date-time
                capacity:
                  type: integer
                price:
                  type: number

    TransactionDetail:
      allOf:
        - $ref: '#/components/schemas/TransactionSummary'
        - type: object
          properties:
            user:
              type: object
              properties:
                email:
                  type: string
                  format: email
                first_name:
                  type: string
                last_name:
                  type: string
                role:
                  type: string
                profile_image_url:
                  type: string
                  nullable: true
                created_at:
                  type: string
                  format: date-time
                is_verified:
                  type: boolean

    Wallet:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        balance:
          oneOf:
            - type: number
            - type: string
        status:
          type: string
        user:
          type: object
          properties:
            first_name:
              type: string

    RevenuePoint:
      type: object
      properties:
        date:
          type: string
          description: YYYY-MM-DD
        amount:
          type: number

    EventSummary:
      type: object
      properties:
        eventId:
          type: string
        eventName:
          type: string
        ticketsSold:
          type: integer
        totalRevenue:
          type: number
        attendees:
          type: integer

    Analytics:
      type: object
      properties:
        totalEvents:
          type: integer
        totalTicketsSold:
          type: integer
        totalRevenue:
          oneOf:
            - type: number
            - type: string

paths:
  /:
    get:
      tags: [Health]
      summary: Root
      responses:
        '200':
          description: Service root
          content:
            application/json:
              schema:
                type: object
    # Note: POST / is not used; event creation is under /events

  /pid:
    get:
      tags: [Health]
      summary: Process ID
      responses:
        '200':
          description: PID response
          content:
            application/json:
              schema:
                type: object

  /health:
    get:
      tags: [Health]
      summary: Health check
      responses:
        '200':
          description: Health OK
          content:
            application/json:
              schema:
                type: object

  /metrics:
    get:
      tags: [Health]
      summary: Metrics
      responses:
        '200':
          description: Metrics payload
          content:
            application/json:
              schema:
                type: object

  /user/signup:
    post:
      tags: [Users]
      summary: User signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Validation or duplicate user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/signin:
    post:
      tags: [Users]
      summary: User signin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigninRequest'
      responses:
        '200':
          description: Signin successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid email or request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/verify:
    post:
      tags: [Users]
      summary: Verify user OTP
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerificationRequest'
      responses:
        '200':
          description: OTP verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Invalid or expired OTP / bad input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/logout:
    post:
      tags: [Users]
      summary: Logout user (revoke tokens)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logged out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/reset-password:
    post:
      tags: [Users]
      summary: Reset user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Invalid data or email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/me:
    get:
      tags: [Users]
      summary: Get current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMeResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: [Users]
      summary: Update current user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/UserSummary'
        '400':
          description: No fields provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/my:
    delete:
      tags: [Users]
      summary: Delete user and related data
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User and data deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/my/cards:
    get:
      tags: [Users]
      summary: List user's cards
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cards for current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardsResponse'
        '403':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /events:
    post:
      tags: [Events]
      summary: Create event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreateRequest'
      responses:
        '201':
          description: Event created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  event: { $ref: '#/components/schemas/Event' }
        '400':
          description: Validation failed or organiser not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags: [Events]
      summary: List events (public) with filters
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, published, cancelled]
        - name: organiser
          in: query
          schema:
            type: string
        - name: title
          in: query
          schema:
            type: string
        - name: location
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Events matched
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items: { $ref: '#/components/schemas/Event' }
                  - type: object
                    properties:
                      events:
                        type: array
                        items: { $ref: '#/components/schemas/Event' }
                      message:
                        type: string
        '404':
          description: No events for filters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /events/{id}:
    delete:
      tags: [Events]
      summary: Delete event and its slots
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /events/{eventId}/slots:
    post:
      tags: [Events]
      summary: Create event slot
      parameters:
        - name: eventId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventSlotCreateRequest'
      responses:
        '201':
          description: Slot created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  slot: { $ref: '#/components/schemas/EventSlot' }
        '400':
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags: [Events]
      summary: List slots for an event
      parameters:
        - name: eventId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Slots
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      slots:
                        type: array
                        items: { $ref: '#/components/schemas/EventSlot' }
                  - type: array
                    items: { $ref: '#/components/schemas/EventSlot' }
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /events/{eventId}/slots/{slotId}:
    delete:
      tags: [Events]
      summary: Delete a specific slot
      parameters:
        - name: eventId
          in: path
          required: true
          schema: { type: string }
        - name: slotId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Slot deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  slotId: { type: string }
        '404':
          description: Slot not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tickets/purchase:
    post:
      tags: [Tickets]
      summary: Purchase tickets
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketPurchaseRequest'
      responses:
        '200':
          description: Ticket purchased
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketPurchaseResponse'
        '400':
          description: Validation or capacity issues
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found or invalid card
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tickets/my:
    get:
      tags: [Tickets]
      summary: List my tickets
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Ticket list or empty message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  ticketRecords:
                    type: array
                    items:
                      type: object
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tickets/{ticketId}:
    get:
      tags: [Tickets]
      summary: Get a ticket detail
      security:
        - bearerAuth: []
      parameters:
        - name: ticketId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Ticket detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  ticketDetail:
                    $ref: '#/components/schemas/TicketDetail'
        '404':
          description: Ticket not found or not owned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /transactions/my:
    get:
      tags: [Transactions]
      summary: List my transactions
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Transactions
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      $ref: '#/components/schemas/TransactionSummary'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /transactions/{txnId}:
    get:
      tags: [Transactions]
      summary: Get transaction by ID
      security:
        - bearerAuth: []
      parameters:
        - name: txnId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDetail'
        '403':
          description: Forbidden or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /transactions/initiate:
    post:
      tags: [Transactions]
      summary: Initiate a transaction
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionInitiateRequest'
      responses:
        '200':
          description: Transaction initialized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Validation error or invalid amount/card
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organiser/signup:
    post:
      tags: [Organisers]
      summary: Organiser signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Validation or duplicate user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organiser/signin:
    post:
      tags: [Organisers]
      summary: Organiser signin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigninRequest'
      responses:
        '200':
          description: Signin successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid email or request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organiser/verify:
    post:
      tags: [Organisers]
      summary: Verify organiser OTP
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerificationRequest'
      responses:
        '200':
          description: Verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Invalid OTP or request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organiser/initiate:
    post:
      tags: [Organisers]
      summary: Initiate organiser wallet payment
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionInitiateRequest'
      responses:
        '200':
          description: Initiation recorded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Invalid data/balance/card
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organiser/events:
    get:
      tags: [Organisers]
      summary: List organiser's events
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, published, cancelled]
        - name: title
          in: query
          schema:
            type: string
        - name: location
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Events fetched
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Event' }
        '404':
          description: No events for filters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '403':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organiser/events/summary:
    get:
      tags: [Organisers]
      summary: Event summaries (tickets, revenue, attendees)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Summaries
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/EventSummary' }
        '403':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organiser/events/analytics:
    get:
      tags: [Organisers]
      summary: Organiser analytics totals
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Analytics
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data:
                    $ref: '#/components/schemas/Analytics'
        '403':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organiser/events/top:
    get:
      tags: [Organisers]
      summary: Top performing events
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 5
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [revenue, tickets]
            default: revenue
      responses:
        '200':
          description: Top events
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        eventId: { type: string }
                        eventName: { type: string }
                        ticketsSold: { type: integer }
                        totalRevenue:
                          oneOf:
                            - type: number
                            - type: string
        '403':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organiser/events/revenue:
    get:
      tags: [Organisers]
      summary: Revenue trend by day
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            description: YYYY-MM-DD
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            description: YYYY-MM-DD
      responses:
        '200':
          description: Revenue data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RevenuePoint'
        '400':
          description: Missing date range
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organiser/balance:
    get:
      tags: [Organisers]
      summary: Get organiser wallet balance
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Wallet balance
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  balance:
                    $ref: '#/components/schemas/Wallet'
        '403':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organiser/events/{eventId}/tickets:
    get:
      tags: [Organisers]
      summary: Tickets sold for an event
      security:
        - bearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Count
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  ticketSold: { type: integer }
        '403':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Missing eventId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
